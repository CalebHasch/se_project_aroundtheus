!function(){"use strict";class e{constructor(e,t){this.settingsObj=e,this.form=t,this._submitButton=this.form.querySelector(e.submitButtonSelector),this._inputList=Array.from(this.form.querySelectorAll(e.inputSelector))}enableValidation(){this._inputList.forEach((e=>{this._addInputEvents(e)}))}_addInputEvents(e){e.addEventListener("input",(()=>{this._checkValidity(e),this.toggleSubmitButton()}))}_checkValidity(e){const t=e.nextSibling.nextSibling;e.validity.valid?this._hideError(t,e):this._showError(t,e)}resetValidation(){this.toggleSubmitButton(),this._inputList.forEach((e=>{this._hideError(e.nextSibling.nextSibling,e)}))}_showError(e,t){const s=t.validationMessage;t.classList.add(this.settingsObj.inputErrorClass),e.textContent=s}_hideError(e,t){t.classList.remove(this.settingsObj.inputErrorClass),e.textContent=""}toggleSubmitButton(){this._hasInvalidInput(this._inputList)?(this._submitButton.classList.add(this.settingsObj.inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this.settingsObj.inactiveButtonClass),this._submitButton.disabled=!1)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}}class t{constructor(e,t,s,i,r){this.image=e.link,this.text=e.name,this.id=e._id,this.isLiked=e.isLiked,this.cardTemplate=document.querySelector(t).content,this.handleImageClick=s,this.handleTrashClick=i,this.handleLikeClick=r,this._cardElement=this.cardTemplate.querySelector(".locations__card").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._deleteButton=this._cardElement.querySelector(".card__delete-icon"),this._likeButton=this._cardElement.querySelector(".card__like-icon")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this.handleLikeClick(this)})),this._deleteButton.addEventListener("click",(()=>{this.handleTrashClick(this)})),this._cardImage.addEventListener("click",this.handleImageClick)}checkedIfLiked=()=>{this.isLiked?this._likeButton.classList.add("card__like-icon_clicked"):this._likeButton.classList.remove("card__like-icon_clicked")};_removeCard=()=>{this._cardElement.remove()};createCard(){return this._setEventListeners(),this.checkedIfLiked(),this._cardImage.src=this.image,this._cardImage.alt=this.text,this._cardTitle.textContent=this.text,this._cardElement}}class s{constructor(e){this.modal=document.querySelector(e),this.currentId="",this.removeHandler=""}openModal(e){this.modal.classList.add("modal_opened"),this.modal.addEventListener("click",this._handleCloseEvent),document.addEventListener("keydown",this._handleCloseEvent)}closeModal(){this.modal.classList.remove("modal_opened"),this.modal.removeEventListener("click",this._handleCloseEvent),document.removeEventListener("keydown",this._handleCloseEvent)}_handleCloseEvent=e=>{(e.target.classList.contains("modal")||"Escape"==e.key)&&this.closeModal()};setEventListeners(){this.modal.querySelector(".modal__close").addEventListener("click",(()=>this.closeModal()))}}class i extends s{constructor(e,t){super(e),this.submit=t,this.form=this.modal.querySelector(".form"),this.inputs=this.form.querySelectorAll(".form__input"),this.button=this.form.querySelector(".form__submit-button"),this.buttonText=this.button.textContent}renderLoading(e){e?"form-delete-card"===this.form.id?this.button.textContent="Deleting...":this.button.textContent="Saving...":this.button.textContent=this.buttonText}setUpDeleteModal=e=>{this.currentId=e.id,this.removeHandler=e._removeCard,super.openModal()};_getInputValues(){const e={};return this.inputs.forEach((t=>{t.name,e[t.name]=t.value})),e}setInputs(e){this.inputs.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this.form.addEventListener("submit",(e=>{e.preventDefault(),this.submit(this._getInputValues())}))}}const r=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_processResponse=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._processResponse).then((e=>(e.description=e.about,e)))}updateUserInfo(e){let{name:t,description:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._processResponse)}updateUserImage(e){let{avatar:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._processResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._processResponse).then((e=>e))}postCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._processResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._processResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}getAll(){return Promise.all([this.getUserInfo(),this.getInitialCards()]).then((e=>e))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"fd5203a5-1f57-4428-b210-42e565daa250","Content-Type":"application/json"}}),o={formSelector:".form",fieldSelector:".form__field",inputSelector:".form__input",errorSelector:".form__error",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_inactive",inputErrorClass:"form__input_invalid"},n=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),d=document.querySelector(".profile__pic"),l=document.forms["form-edit-profile"],c=document.forms["form-add-card"],h=document.forms["form-profile-pic"],u=document.querySelector(".location__image"),p=document.querySelector(".location__title"),m={cardPopup:new i("#add-card-modal",(function(e){let{title:t,link:s}=e;const i={name:t,link:s};m.cardPopup.renderLoading(!0),r.postCard(i).then((e=>{f.addItem(e,"prepend"),m.cardPopup.form.reset(),m.cardPopup.closeModal(),m.cardPopup.renderLoading()})).catch((e=>console.error(e))).finally((()=>g.cardFormValidation.toggleSubmitButton()))})),profilePopup:new i("#edit-profile-modal",(function(e){let{name:t,description:s}=e;m.profilePopup.renderLoading(!0),r.updateUserInfo({name:t,description:s}).then((()=>{_.setUserInfo({name:t,description:s}),m.profilePopup.closeModal(),m.profilePopup.renderLoading()})).catch((e=>console.error(e)))})),deleteCardPopup:new i("#delete-card-modal",(function(){m.deleteCardPopup.renderLoading(!0),r.deleteCard(this.currentId).then((()=>{m.deleteCardPopup.removeHandler(),m.deleteCardPopup.closeModal(),m.deleteCardPopup.renderLoading()})).catch((e=>console.error(e)))})),profilePicPopup:new i("#profile-pic-modal",(function(e){let{avatar:t}=e;m.profilePicPopup.renderLoading(!0),r.updateUserImage({avatar:t}).then((()=>{_.setUserImage({avatar:t}),m.profilePicPopup.closeModal(),m.profilePicPopup.renderLoading(),m.profilePicPopup.form.reset()})).catch((e=>console.error(e))).finally((()=>g.picFormValidation.toggleSubmitButton()))})),locationPopup:new class extends s{openModal=(e,t,s)=>{let{name:i,link:r}=e;t.src=r,t.alt=i,s.textContent=i,super.openModal()}}("#location-modal")},_=new class{constructor(e,t){let{nameSelector:s,descriptionSelector:i}=e;this.name=document.querySelector(s),this.description=document.querySelector(i),this.image=t}getUserInfo(){return{name:this.name.textContent,description:this.description.textContent}}setUserInfo(e){let{name:t,description:s}=e;this.name.textContent=t,this.description.textContent=s}setUserImage(e){let{avatar:t}=e;this.image.src=t}}({nameSelector:".profile__name",descriptionSelector:".profile__subtitle"},d),f=new class{constructor(e,t){let{renderer:s}=e;this.renderer=s,this.container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this.addItem(e)}))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";const s=this.renderer(e);this.container[t](s)}}({renderer:function(e){return new t(e,"#locations__card",(()=>{m.locationPopup.openModal(e,u,p)}),m.deleteCardPopup.setUpDeleteModal,v).createCard()}},".locations"),g={editFormValidation:new e(o,l),cardFormValidation:new e(o,c),picFormValidation:new e(o,h)};for(let e in m)m[e].setEventListeners();for(let e in g)g[e].enableValidation();function v(e){console.log(e.id),e.isLiked?r.dislikeCard(e.id).then((t=>{e.isLiked=!1,e.checkedIfLiked()})).catch((e=>console.error(e))):r.likeCard(e.id).then((t=>{e.isLiked=!0,e.checkedIfLiked()})).catch((e=>console.error(e)))}r.getAll().then((e=>{let[t,s]=e;_.setUserInfo(t),_.setUserImage(t),m.profilePopup.setInputs(_.getUserInfo()),f.renderItems(s)})).catch((e=>console.error(e))),n.addEventListener("click",(function(){m.profilePopup.openModal(),g.editFormValidation.resetValidation()})),a.addEventListener("click",(function(){m.cardPopup.openModal()})),d.addEventListener("click",(function(){m.profilePicPopup.openModal()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,